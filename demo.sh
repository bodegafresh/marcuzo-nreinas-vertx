#!/bin/bash

# Script de demostraci√≥n para N-Reinas Distribuido
# Funciona sin Docker para mostrar la funcionalidad

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${PURPLE}================================================${NC}"
    echo -e "${PURPLE}$1${NC}"
    echo -e "${PURPLE}================================================${NC}"
}

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Funci√≥n para construir la aplicaci√≥n
build_app() {
    print_status "Construyendo aplicaci√≥n N-Reinas..."
    ./gradlew clean shadowJar
    print_success "Aplicaci√≥n construida correctamente"
}

# Funci√≥n para iniciar la aplicaci√≥n
start_app() {
    print_status "Iniciando aplicaci√≥n N-Reinas en segundo plano..."

    # Detener proceso anterior si existe
    pkill -f "java.*marcuzo-nreinas-vertx" 2>/dev/null || true

    # Iniciar aplicaci√≥n en background
    nohup java -Xmx1g -Xms512m -Dvertx.metrics.options.enabled=true \
         -jar build/libs/*-fat.jar > app.log 2>&1 &

    APP_PID=$!
    echo $APP_PID > app.pid

    print_success "Aplicaci√≥n iniciada con PID: $APP_PID"
    print_status "Esperando a que la aplicaci√≥n est√© lista..."

    # Esperar a que la aplicaci√≥n est√© lista
    for i in {1..30}; do
        if curl -s -f "http://localhost:8080/status" > /dev/null 2>&1; then
            print_success "¬°Aplicaci√≥n lista!"
            return 0
        fi
        sleep 2
        echo -n "."
    done

    print_error "La aplicaci√≥n tard√≥ demasiado en iniciarse"
    return 1
}

# Funci√≥n para probar la funcionalidad
test_functionality() {
    print_header "üß™ PROBANDO FUNCIONALIDAD"

    # Probar endpoint de estado
    print_status "Probando endpoint de estado..."
    status_response=$(curl -s "http://localhost:8080/status")
    echo -e "${CYAN}Respuesta:${NC} $status_response"
    echo ""

    # Probar resoluci√≥n de 4-Reinas
    print_status "Resolviendo problema de 4-Reinas con 2 workers..."
    nqueens_response=$(curl -s "http://localhost:8080/solve?n=4&workers=2")
    echo -e "${CYAN}Respuesta (4-Reinas):${NC}"
    echo "$nqueens_response" | jq . 2>/dev/null || echo "$nqueens_response"
    echo ""

    # Probar resoluci√≥n de 8-Reinas
    print_status "Resolviendo problema de 8-Reinas con 4 workers..."
    nqueens8_response=$(curl -s "http://localhost:8080/solve?n=8&workers=4")
    echo -e "${CYAN}Respuesta (8-Reinas - mostrando resumen):${NC}"
    echo "$nqueens8_response" | jq '{N, totalSolutions, elapsedTimeMs, workersDeployed, status}' 2>/dev/null || echo "Respuesta recibida (JSON sin formato)"
    echo ""
}

# Funci√≥n para mostrar m√©tricas
show_metrics() {
    print_header "üìä M√âTRICAS DE PROMETHEUS"

    print_status "Obteniendo m√©tricas de la aplicaci√≥n..."
    echo -e "${CYAN}M√©tricas destacadas:${NC}"

    # Extraer m√©tricas espec√≠ficas
    metrics=$(curl -s "http://localhost:8080/metrics")

    echo "$metrics" | grep -E "(http_requests_total|nqueens_requests_total|worker_.*_total|jvm_memory_used_bytes)" | head -10
    echo ""

    print_status "M√©tricas completas disponibles en: http://localhost:8080/metrics"
}

# Funci√≥n para demostrar la arquitectura
show_architecture() {
    print_header "üèóÔ∏è ARQUITECTURA DEL SISTEMA"

    cat << 'EOF'
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                    N-REINAS DISTRIBUIDO                        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ
                                    ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   MainVerticle  ‚îÇ    ‚îÇ OrquestadorVert ‚îÇ    ‚îÇ StateManagerVert‚îÇ
‚îÇ   (HTTP Server) ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   (Coordinator) ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   (DP Cache)    ‚îÇ
‚îÇ   Port 8080     ‚îÇ    ‚îÇ   Event Bus     ‚îÇ    ‚îÇ   Event Bus     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ                       ‚îÇ                       ‚îÇ
         ‚ñº                       ‚ñº                       ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   WorkerVert    ‚îÇ    ‚îÇ   WorkerVert    ‚îÇ    ‚îÇ   WorkerVert    ‚îÇ
‚îÇ   Worker #0     ‚îÇ    ‚îÇ   Worker #1     ‚îÇ    ‚îÇ   Worker #N     ‚îÇ
‚îÇ   (Backtracking)‚îÇ    ‚îÇ   (Standby)     ‚îÇ    ‚îÇ   (Standby)     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

MONITOREO COMPLETO:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   Prometheus    ‚îÇ    ‚îÇ     Grafana     ‚îÇ    ‚îÇ  AlertManager   ‚îÇ
‚îÇ   (M√©tricas)    ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   (Dashboards)  ‚îÇ‚óÑ‚îÄ‚îÄ‚ñ∫‚îÇ   (Alertas)     ‚îÇ
‚îÇ   Port 9090     ‚îÇ    ‚îÇ   Port 3000     ‚îÇ    ‚îÇ   Port 9093     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
EOF

    echo ""
    print_status "Componentes implementados:"
    echo "  ‚úÖ MainVerticle - Servidor HTTP con m√©tricas"
    echo "  ‚úÖ OrquestadorVerticle - Coordinaci√≥n distribuida"
    echo "  ‚úÖ StateManagerVerticle - Cache de estados DP"
    echo "  ‚úÖ WorkerVerticle - Algoritmo de backtracking"
    echo "  ‚úÖ Prometheus metrics - Monitoreo completo"
    echo "  ‚úÖ Docker setup - Infraestructura containerizada"
    echo "  ‚úÖ Grafana dashboards - Visualizaciones"
    echo "  ‚úÖ AlertManager - Sistema de alertas"
}

# Funci√≥n para mostrar informaci√≥n de monitoreo
show_monitoring_info() {
    print_header "üìä INFORMACI√ìN DE MONITOREO"

    echo -e "${CYAN}Configuraci√≥n implementada:${NC}"
    echo ""
    echo "üìÅ Estructura de monitoreo:"
    echo "‚îú‚îÄ‚îÄ monitoring/"
    echo "‚îÇ   ‚îú‚îÄ‚îÄ prometheus.yml          # Configuraci√≥n de Prometheus"
    echo "‚îÇ   ‚îú‚îÄ‚îÄ rules/                  # Reglas de alertas"
    echo "‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ nreinas_alerts.yml  # Alertas espec√≠ficas"
    echo "‚îÇ   ‚îú‚îÄ‚îÄ alertmanager.yml        # Configuraci√≥n de AlertManager"
    echo "‚îÇ   ‚îî‚îÄ‚îÄ grafana/"
    echo "‚îÇ       ‚îú‚îÄ‚îÄ dashboards/         # Dashboards pre-configurados"
    echo "‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ nreinas-overview.json"
    echo "‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ system-metrics.json"
    echo "‚îÇ       ‚îî‚îÄ‚îÄ provisioning/       # Configuraci√≥n autom√°tica"
    echo "‚îÇ           ‚îú‚îÄ‚îÄ datasources/"
    echo "‚îÇ           ‚îî‚îÄ‚îÄ dashboards/"
    echo ""

    echo -e "${CYAN}Servicios de monitoreo (Puerto):${NC}"
    echo "  üè∞ N-Reinas App     ‚Üí http://localhost:8080"
    echo "  üìä Prometheus       ‚Üí http://localhost:9090"
    echo "  üìà Grafana         ‚Üí http://localhost:3000 (admin/admin123)"
    echo "  üö® AlertManager    ‚Üí http://localhost:9093"
    echo "  üñ•Ô∏è  Node Exporter   ‚Üí http://localhost:9100"
    echo "  üê≥ cAdvisor        ‚Üí http://localhost:8081"
    echo ""

    echo -e "${CYAN}Para desplegar el stack completo:${NC}"
    echo "  1. Instalar Docker y Docker Compose"
    echo "  2. Ejecutar: ./deploy.sh"
    echo "  3. Acceder a Grafana para ver dashboards"
    echo ""
}

# Funci√≥n para limpiar
cleanup() {
    print_status "Deteniendo aplicaci√≥n..."

    if [ -f app.pid ]; then
        APP_PID=$(cat app.pid)
        kill $APP_PID 2>/dev/null || true
        rm app.pid
        print_success "Aplicaci√≥n detenida"
    fi

    # Limpiar archivos temporales
    rm -f app.log nohup.out
}

# Funci√≥n principal
main() {
    print_header "üöÄ DEMO: N-REINAS DISTRIBUIDO CON MONITOREO"

    # Construir aplicaci√≥n
    build_app
    echo ""

    # Mostrar arquitectura
    show_architecture
    echo ""

    # Iniciar aplicaci√≥n
    start_app
    echo ""

    # Probar funcionalidad
    test_functionality
    echo ""

    # Mostrar m√©tricas
    show_metrics
    echo ""

    # Mostrar informaci√≥n de monitoreo
    show_monitoring_info

    print_header "‚ú® DEMO COMPLETADO"

    echo -e "${GREEN}¬°La aplicaci√≥n est√° funcionando correctamente!${NC}"
    echo ""
    echo -e "${CYAN}Para probar manualmente:${NC}"
    echo "  curl \"http://localhost:8080/solve?n=6&workers=3\""
    echo "  curl \"http://localhost:8080/status\""
    echo "  curl \"http://localhost:8080/metrics\""
    echo ""
    echo -e "${YELLOW}La aplicaci√≥n seguir√° ejecut√°ndose en segundo plano.${NC}"
    echo -e "${YELLOW}Para detenerla, ejecuta: ./demo.sh stop${NC}"
}

# Manejar argumentos
case "${1:-}" in
    "stop")
        cleanup
        ;;
    "logs")
        if [ -f app.log ]; then
            tail -f app.log
        else
            echo "No hay logs disponibles"
        fi
        ;;
    "status")
        if [ -f app.pid ]; then
            APP_PID=$(cat app.pid)
            if ps -p $APP_PID > /dev/null; then
                echo "‚úÖ Aplicaci√≥n ejecut√°ndose (PID: $APP_PID)"
                curl -s "http://localhost:8080/status" | jq . 2>/dev/null || echo "Aplicaci√≥n respondiendo"
            else
                echo "‚ùå Aplicaci√≥n no est√° ejecut√°ndose"
            fi
        else
            echo "‚ùå No se encuentra archivo PID"
        fi
        ;;
    *)
        main
        ;;
esac
